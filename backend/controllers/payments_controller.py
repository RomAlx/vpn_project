# app/controllers/payments_controller.py
from datetime import datetime

from fastapi import HTTPException
from telegram.constants import ParseMode
from ..logs.logger import Logger
from backend.repositories.user_repository import UserRepository as user_repository

logger = Logger(name="controller.payment").get_logger()


class PaymentController:
    def __init__(self, bot):
        self.bot = bot
        self.logger = logger

    async def handle_payment_success(self, order_id: str, amount: float):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞

        Args:
            order_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            amount (float): –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ USD
        """
        try:
            self.logger.info(f"Processing successful payment: order_id={order_id}, amount={amount}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id –∏–∑ order_id
            try:
                order_id_parts = order_id.split('_')
                tg_id = int(order_id_parts[1])
            except (IndexError, ValueError) as e:
                self.logger.error(f"Invalid order_id format: {order_id}")
                raise ValueError(f"Invalid order_id format: {str(e)}")

            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = user_repository.get_user_by_tg_id(tg_id=tg_id)
            if not user:
                self.logger.error(f"User not found: tg_id={tg_id}")
                raise HTTPException(status_code=404, detail="User not found")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            try:
                new_balance = round(user.balance + amount, 2)
                user_repository.update_user_balance(user.id, new_balance)
                self.logger.info(f"Balance updated for user {tg_id}: +{amount} USD, new balance: {new_balance} USD")
            except Exception as e:
                self.logger.error(f"Error updating balance: {str(e)}")
                raise

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message = (
                f"‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
                f"üí∞ –°—É–º–º–∞: `{amount}` USD\n"
                f"üí≥ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: `{new_balance}` USD"
            )

            await self.bot.send_message(
                chat_id=user.tg_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )

        except ValueError as ve:
            self.logger.error(f"Validation error in payment success handler: {str(ve)}")
            raise HTTPException(status_code=400, detail=str(ve))
        except HTTPException:
            raise
        except Exception as e:
            self.logger.error(f"Error processing successful payment: {str(e)}")
            raise HTTPException(status_code=500, detail="Error processing successful payment")

    async def handle_payment_cancel(self, order_id: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞

        Args:
            order_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        """
        try:
            self.logger.info(f"Processing payment cancellation: order_id={order_id}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id
            try:
                order_id_parts = order_id.split('_')
                tg_id = int(order_id_parts[1])
            except (IndexError, ValueError) as e:
                self.logger.error(f"Invalid order_id format: {order_id}")
                raise ValueError(f"Invalid order_id format: {str(e)}")

            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = user_repository.get_user_by_tg_id(tg_id=tg_id)
            if not user:
                self.logger.error(f"User not found: tg_id={tg_id}")
                raise HTTPException(status_code=404, detail="User not found")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message = (
                "‚ùå *–ü–ª–∞—Ç—ë–∂ –Ω–µ —É–¥–∞–ª—Å—è*\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞\n"
                "‚Ä¢ –ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
                "_–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É._"
            )

            await self.bot.send_message(
                chat_id=user.tg_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )

        except ValueError as ve:
            self.logger.error(f"Validation error in payment cancel handler: {str(ve)}")
            raise HTTPException(status_code=400, detail=str(ve))
        except HTTPException:
            raise
        except Exception as e:
            self.logger.error(f"Error processing payment cancellation: {str(e)}")
            raise HTTPException(status_code=500, detail="Error processing payment cancellation")

    async def handle_payment_error(self, order_id: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø–ª–∞—Ç–µ–∂–∞

        Args:
            order_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        """
        try:
            self.logger.info(f"Processing payment error: order_id={order_id}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id
            try:
                order_id_parts = order_id.split('_')
                tg_id = int(order_id_parts[1])
            except (IndexError, ValueError) as e:
                self.logger.error(f"Invalid order_id format: {order_id}")
                raise ValueError(f"Invalid order_id format: {str(e)}")

            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = user_repository.get_user_by_tg_id(tg_id=tg_id)
            if not user:
                self.logger.error(f"User not found: tg_id={tg_id}")
                raise HTTPException(status_code=404, detail="User not found")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            message = (
                "‚ö†Ô∏è *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞*\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —É–∫–∞–∂–∏—Ç–µ:\n"
                f"‚Ä¢ ID –∑–∞–∫–∞–∑–∞: `{order_id}`\n"
                f"‚Ä¢ –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞: `{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}`\n\n"
                "_–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –ø—Ä–æ–±–ª–µ–º–æ–π._"
            )

            await self.bot.send_message(
                chat_id=user.tg_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )

        except ValueError as ve:
            self.logger.error(f"Validation error in payment error handler: {str(ve)}")
            raise HTTPException(status_code=400, detail=str(ve))
        except HTTPException:
            raise
        except Exception as e:
            self.logger.error(f"Error processing payment error: {str(e)}")
            raise HTTPException(status_code=500, detail="Error processing payment error")

    async def handle_payment_progress(self, order_id: str, status: str):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–ª–∞—Ç–µ–∂–∞

        Args:
            order_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
            status (str): –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            self.logger.info(f"Processing payment progress: order_id={order_id}, status={status}")

            # –ò–∑–≤–ª–µ–∫–∞–µ–º tg_id
            try:
                order_id_parts = order_id.split('_')
                tg_id = int(order_id_parts[1])
            except (IndexError, ValueError) as e:
                self.logger.error(f"Invalid order_id format: {order_id}")
                raise ValueError(f"Invalid order_id format: {str(e)}")

            # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = user_repository.get_user_by_tg_id(tg_id=tg_id)
            if not user:
                self.logger.error(f"User not found: tg_id={tg_id}")
                raise HTTPException(status_code=404, detail="User not found")

            # –°—Ç–∞—Ç—É—Å—ã –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏—è
            status_messages = {
                "waiting": "‚è≥ *–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã*\n\n–û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤...",
                "confirming": "üîÑ *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏*\n\n–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–µ—Ç–∏...",
                "confirmed": "‚úîÔ∏è *–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞*\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø–∏–ª–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç—ë–∂...",
                "sending": "üì§ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞*\n\n–ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é..."
            }

            message = status_messages.get(
                status,
                f"üîÑ *–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞*\n\n–°—Ç–∞—Ç—É—Å: {status}"
            )

            await self.bot.send_message(
                chat_id=user.tg_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )

        except ValueError as ve:
            self.logger.error(f"Validation error in payment progress handler: {str(ve)}")
            raise HTTPException(status_code=400, detail=str(ve))
        except HTTPException:
            raise
        except Exception as e:
            self.logger.error(f"Error processing payment progress: {str(e)}")
            raise HTTPException(status_code=500, detail="Error processing payment progress")